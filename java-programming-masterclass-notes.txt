Coding Exercise 1: Speed Converter

public class SpeedConverter {

    public static long toMilesPerHour(double kilometersPerHour) {

        if (kilometersPerHour < 0) {
            return -1;
        }

        return Math.round(kilometersPerHour / 1.609);
    }

    public static void printConversion(double kilometersPerHour) {

        if(kilometersPerHour < 0) {
            System.out.println("Invalid Value");
        } else {
            long milePerHour = toMilesPerHour(kilometersPerHour);
            System.out.println(kilometersPerHour +
                    " km/h = " + milePerHour +
                    " mi/h");
        }
    }
}

Coding Exercise 2: MegaBytes Converter

public class MegaBytesConverter {

    public static void printMegaBytesAndKiloBytes (int kiloBytes) {

        int megaBytes = kiloBytes / 1024;


        if (kiloBytes < 0) {
            System.out.println("Invalid Value");
        } else {
            System.out.println(kiloBytes + " KB = " + megaBytes + " MB " + "and " + (kiloBytes % 1024) + " KB" );

        }
    }
}

Coding Exercise 3: Barking Dog

public class BarkingDog {

    public static boolean shouldWakeUp(boolean barking, int hourOfDay) {
        if (barking && hourOfDay < 0 || hourOfDay > 23) {
            return false;
        } else if (barking && hourOfDay < 8 || hourOfDay > 22) {
            return true;
        }
        return false;
    }
}

Coding Exercise 4: Leap Year Calculator

public class LeapYear {

    public static boolean isLeapYear(int year) {

        if (year <= 1 || year >= 9999) {
            System.out.println("Invalid parameter");
            return false;
        } else {
            if (year % 4 == 0 && year % 100 != 0 || year % 100 == 0 && year % 400 == 0) {
                return true;
            }
        }
        return false;

Coding Exercise 5: DecimalComparator

public class DecimalComparator {

    public static boolean areEqualByThreeDecimalPlaces(double firstNumber, double secondNumber) {

        if ((int) (firstNumber * 1000) == (int) (secondNumber * 1000)) {
            return true;
        }
        return false;
    }
}
    
// double conversion to three decimal format requires that I multiply the double by 1000

Coding Exercise 6: Teen Number Checker

public class EqualSumChecker {

    public static boolean hasEqualSum(int firstValue, int secondValue , int thirdValue) {
        if (firstValue + secondValue == thirdValue) {
            return true;
        }
        return false;
}

    
